<program> ::= <program heading> <block>.

<program heading> ::= <PROGRAM>	 <identifier> <SEMI_COLON>

<block> ::= <constant definition part><type definition part><variable declaration part><procedure and function declaration part><statement part>

<constant definition part> ::= <empty> | <CONST> <constant definition>{<SEMI_COLON> <constant definition>} <SEMI_COLON>

<constant definition> ::= <identifier> <EQUAL> <constant>

<constant> ::= <NUMBER> | <sign><NUMBER> | <constant identifier> | <sign><constant identifier> | <CHAR>

<sign> ::= <ADD_OP> | <MINUS_OP>

<constant identifier> ::= <IDENTIFIER>

<type definition part> ::= <empty> | <TYPE> <type definition> {<SEMI_COLON> <type definition>} <SEMI_COLON>

<type definition> ::= <IDENTIFIER> <EQUAL> <type>

<type> ::= <simple type> | <structured type>

<simple type> ::= <subrange type> | <type identifier>

<subrange type> ::= <constant> <SUBRANGE_SEPARATOR> <constant>

<type identifier> ::= <IDENTIFIER>

<structured type> ::= <unpacked structured type>

<unpacked structured type> ::= <array type>

<array type> ::= <ARRAY> <OPEN_BRACKET> <index type> <CLOSE_BRACKET> <OF> <component type>

<index type> ::= <simple type>

<component type> ::= <simple type>

<variable definition part> : := <empty> | <VAR> <variable declaration>{<SEMI_COLON> <variable declaration>} <SEMI_COLON>

<variable declaration> ::= <identifier>{<COMMA> <identifier>} <TYPE_DECLARATION> <type>

<procedure and function declaration part> ::= {<procedure or function declaration part> <SEMI_COLON>}

<procedure or function declaration part> ::= <procedure declaration> | <function declaration>

<procedure declaration> ::= <procedure heading> <block>

<procedure heading> ::= <PROCEDURE> <identifier> <SEMI_COLON> | <PROCEDURE> <identifier> <OPEN_PARENTHESIS> <formal parameter section> {<SEMI_COLON> <formal parameter section>} <CLOSE_PARENTHESIS> <SEMI_COLON>

<formal parameter section> ::= <parameter group> | <VAR> <parameter group>

<parameter group> ::= <identifier> {<COMMA> <identifier>} <TYPE_DECLARATION> <type identifier>

<function declaration> ::= <function heading><block>

<function heading> ::= <FUNCTION> <identifier> <TYPE_DECLARATION> <result type> <SEMI_COLON> | <function identifier> <OPEN_PARENTHESIS> <formal parameter section>{<SEMI_COLON> <formal parameter section>} <CLOSE_PARENTHESIS> <TYPE_DECLARATION> <result type> <SEMI_COLON>

<result type> ::= <type identifier>

<statement part> ::= <compound statement>

<compound statement> ::= <BEGIN> <statement>{<SEMI_COLON> <statement>} <END>

<statement> ::= <unlabelled statement>

<unlabelled statement> ::= <simple statement> | <structured statement>

<simple statement> ::= <assignment statement> | <procedure statement> | <empty statement>

<assignment statement> ::= <variable> <ASSIGNMENT> <expression> | <function identifier> <ASSIGNMENT> <expression>

<variable> ::= <entire variable> | <component variable>

<entire variable> ::= <variable identifier>

<variable identifier> ::= <IDENTIFIER>

<component variable> ::= <indexed variable>

<indexed variable> ::= <array variable> <OPEN_BRACKET> <expression> <CLOSE_BRACKET>

<array variable> ::= <entire variable>

<expression> ::= <simple expression> | <simple expression> <relational operator> <simple expression>

<simple expression> ::= <term> | <simple expression> <adding operator> <term> | <sign> <term>

<term>::= <factor> | <term> <multiplying operator> <factor>

<factor> ::= <variable> | <unsigned constant> | <function designator> | (<expression>) | <NOT_LOGOP> <factor> | <char>

<unsigned constant> ::= <unsigned number> | <constant identifier>

<function designator> ::= <function identifier> | <function identifier> <OPEN_PARENTHESIS> <actual parameter> {<COMMA> <actual parameter>} <CLOSE_PARENTHESIS>

<function identifier> ::= <identifier>

<actual parameter> ::= <expression> | <variable>

<multiplying operator> ::= <MULTIPLY_OP> | <DIV_OP> | <AND_LOGOP>

<adding operator> ::= <ADD_OP> | <MINUS_OP> | <OR_LOGOP>

<relational operator> ::= <LESS_OP> | <LESS_EQUAL_OP> | <GREATER_OP> | <GREATER_EQUAL_OP> | <EQUAL>

<procedure statement> ::= <procedure identifier> | <procedure identifier> <OPEN_PARENTHESIS> <actual parameter> {<COMMA> <actual parameter>} <CLOSE_PARENTHESIS>

<procedure identifier> ::= <IDENTIFIER>

<empty statement> ::= <empty>

<structured statement> ::= <compound statement> | <conditional statement> | <repetitive statement>

<conditional statement> ::= <if statement>

<if statement> ::= <IF> <expression> <THEN> <statement> | <IF> <expression> <THEN> <statement> <ELSE> <statement>

<repetitive statement> ::= <while statement>

<while statement> ::= <WHILE> <expression> <DO> <statement>