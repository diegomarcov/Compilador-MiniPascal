<program> ::= 	{
					stStack = newSymbolTableStack()
					
				} 
				<program_heading>
				{
					<block>.idPrograma = <program_heading>.id
					#inicializar el programa con INPP
				}
				<block> <END_PROGRAM> <EOF>
				{
					#finalizar el programa (PARA)
				}

<program_heading> ::= <PROGRAM> <IDENTIFIER>
					{
						<program_heading>.id = <IDENTIFIER>.lex
					}
					<SEMI_COLON>

<block> ::= { 
				stStack.pushNewSymbolTable() 
				if <block>.idPrograma != None:
					stStack.addNewID(<block>.idPrograma], Attr(tipo="program", type = Program()))
			}
            <constant_definition_part> <block_cons_rest> 
            | 
            { 
				stStack.pushNewSymbolTable() 
				if <block>.idPrograma != None:
					stStack[-1][<block>.idPrograma] = newAttr(tipo="program", type = Program())
			}
            <block_cons_rest>

<block_cons_rest> ::= <type_definition_part> <block_type_rest> | <block_type_rest>

<block_type_rest> ::= <variable_definition_part> <block_var_rest> | <block_var_rest>

<block_var_rest> ::= <procedure_and_function_declaration_part> <statement_part> | <statement_part>

<constant_definition_part> ::= <CONST> <constant_definition> <constant_definition_rest>

<constant_definition_rest> ::= <SEMI_COLON> <constant_definition_rest_rest>

<constant_definition_rest_rest> ::= <constant_definition> <constant_definition_rest> | <LAMBDA>

<constant_definition> ::= <IDENTIFIER> <EQUAL> <constant> 
							{
                                # addNewID deberá tener un identificador, y un objeto;
                                # dicho objeto tendrá las propiedades: TIPO, VALOR, y un valor booleano que indica si es constante
								addNewID(<IDENTIFIER>.lex, <constant>.attr)
							}

<constant> ::= 	<NUMBER>
				{
                    <constant>.attr = newAttr(clase="constant", type=Entero(), value=<NUMBER>.lex)
				}
				|
				<IDENTIFIER>
				{
					val = getGlobalValue(<IDENTIFIER>.lex)
					if ((val != None)):
						if (val.clase=="constant"):
							<constant>.attr = copy(val) #copio el attr
						else:
							if (val.clase=="variable"): #no estamos asignando variables ahora
								if val.tipo.instancia(Simple):
									<constant>.attr = Attr(clase="constant",type = val.tipo, value=val.value)
								else:
									error(<IDENTIFIER>.lex + "must be of a simple type") #no se si está bien dicho eso
							else:
								error(<IDENTIFIER>.lex + "is not a valid identifier")
					else:
						error("Undeclared identifier " + <IDENTIFIER>.lex)
				}
				| 
				<CHAR> 
				{
                    <constant>.attr = newAttr(clase="constant", type=Char(), value=<CHAR>.lex)
				}
				| <sign> <constant_rest>
				{
					if !<constant_rest>.tipo.instancia(Entero):
						error("Can not apply "+<sign>.lex+" operator to "+<constant_rest>.tipo) #como redefino __str__ de todos los tipos puedo hacer cosas como esa
					else:
                        <constant_rest>.attr.value = <sign>.value * <constant_rest>.attr.value
                        <constant>.attr = <constant_rest>.attr
						
				}
				

<constant_rest> ::= <NUMBER> 
					{
						<constant_rest>.attr = newAttr(clase="constant", type=Entero(), value=<NUMBER>.lex)
					}
					|
					<IDENTIFIER>
					{
						val = getGlobalValue(<IDENTIFIER>.lex)
						if ((val != None)):
							if (val.clase=="constant"):
								<constant>.attr = copy(val) #copio el attr
							else:
								if (val.clase=="variable"):
									<constant>.attr = Attr(clase="constant",type = val.tipo, value=val.value)
								else:
									error(<IDENTIFIER>.lex + "is not a valid identifier")
						else:
							error("Undeclared identifier " + <IDENTIFIER>.lex)
					}

<sign> ::= <ADD_OP>
			{
				<sign>.value = 1
			}
			|
			<MINUS_OP>
			{
				<sign>.value = -1
			}

<type_definition_part> ::= <TYPE> <type_definition> <type_definition_rest>

<type_definition_rest> ::= <SEMI_COLON> <type_definition_rest_rest>

<type_definition_rest_rest> ::= <type_definition> <type_definition_rest> | <LAMBDA>

<type_definition> ::= <IDENTIFIER> <EQUAL> <type>
						{
                            # incluimos en la tabla de símbolos el tipo, indicando que es un "TIPO" e
                            # incluyendo la estructura que servirá para saber si es un subrango, un array,
                            # o cualquier otro tipo simple
							addNewID(<IDENTIFIER>.lex, newAttr(clase="type", type=<type>.tipo))
						}

<type> ::= <simple_type> 
            {
                <type>.tipo = <simple_type>.tipo
            }
            |
            <structured_type>
            {
                <type>.tipo = <structured_type>.tipo
            }

<simple_type> ::= <NUMBER> <SUBRANGE_SEPARATOR> <constant> 
					{
						if !<constant>.tipo.instancia(Entero):
							error("Non compatible subrange bounds (int expected, "+<constant>.tipo+" found).")
						else:
							if <NUMBER>.lex <= <constant>.value:
                                # la estructura devuelta por newType contendrá el TIPO,
                                # y las referencias a los valores lowerBound y upperBound
                                lower = newAttr("constant",type = Entero(),value=<NUMBER>.lex) #no se si tiene sentido mandar attrs, porque ya sabemos que son del mismo tipo... estamos haciendo los controles antes de agregarlos
                                upper = newAttr("constant",type = Entero(),value=constant.value)
								<simple_type>.tipo = SubEntero(lowerBound=lower, upperBound=upper)
							else:
								error("Invalid subrange: lower bound must be smaller than upper bound.")
					}
					|
					<CHAR> <SUBRANGE_SEPARATOR> <constant> 
					{
						if !<constant>.tipo.instancia(Caracter):
							error("Non compatible subrange bounds (char expected, "+<constant>.tipo+" found).")
						else:
							if <CHAR>.lex <= <constant>.value:
                                # la estructura devuelta por newType contendrá el TIPO,
                                # y las referencias a los valores lowerBound y upperBound
                                lower = newAttr("constant",type = Caracter(),value=<CHAR>.lex)
                                upper = newAttr("constant",type = Caracter(),value=constant.value)
								<simple_type>.tipo = SubCaracter(lowerBound=lower, upperBound=upper)
							else:
								error("Invalid subrange: lower bound must be smaller than upper bound.")
					}
					| 
					<sign> <subrange_type_rest> 
					{
						<subrange_type_rest>.tipo.lowerBound.value = <sign>.value * <subrange_type_rest>.tipo.lowerBound.value
						if <subrange_type_rest>.value.lowerBound.value <= <subrange_type_rest>.tipo.upperBound.value:
							<simple_type>.tipo = <subrange_type_rest>.tipo
						else:
							error("Invalid subrange: lower bound must be smaller than upper bound.")
					}
					| 
					<IDENTIFIER> <simple_type_rest>
					{
						#en este caso hay que pedir el tipo a la tabla de tipos
                        val = getGlobalValue(<IDENTIFIER>.lex)
						if <simple_type_rest>.tipo is not None:
							if val.tipo.instancia(type(simple_type_rest>.value)):
								if val.value <= <simple_type_rest>.value.upperBound.value:
									<simple_type_rest>.value.lowerBound = val
								else:
									error("Invalid subrange: lower bound must be smaller than upper bound.")
							else:
								error("Non compatible subrange bounds ("+ <IDENTIFIER>.tipo +" expected, "+ <simple_type_rest>.value.upperBound.tipo.nombre +" found).")
                        else:
							<simple_type>.tipo = val.tipo
					}

<simple_type_rest> ::= <SUBRANGE_SEPARATOR> <constant> 
						{
                            # la estructura devuelta por newType contendrá el TIPO,
                            # que a su vez contendrá las referencias a los valores lowerBound y upperBound
							if <constant>.tipo.instancia(Entero):
								<simple_type_rest>.value = SubEntero(None,<constant>.value)
							elif <constant>.tipo.instancia(Caracter):
								<simple_type_rest>.value = SubCaracter(None,<constant>.value)
							elif <constant>.tipo.instancia(Booleano):
								<simple_type_rest>.value = SubBooleano(None,<constant>.value)
							else:
								error("Yype "+ constant.tipo + "cannot be used in a subrange")
						}
                        |
                        <LAMBDA>
                        {
                            <simple_type_rest>.tipo = None
                        }

<subrange_type_rest> ::= <NUMBER> <SUBRANGE_SEPARATOR> <constant> 
						{
							if !<constant>.tipo.instancia(Entero):
								error("Non compatible subrange bounds (int expected, "+<constant>.tipo+" found).")
							else:
								if <NUMBER>.lex <= <constant>.value:
									# la estructura devuelta por newType contendrá el TIPO,
									# y las referencias a los valores lowerBound y upperBound
									lower = newAttr("constant",type = Entero(),value=<NUMBER>.lex) #no se si tiene sentido mandar attrs, porque ya sabemos que son del mismo tipo... estamos haciendo los controles antes de agregarlos
									upper = newAttr("constant",type = Entero(),value=constant.value)
									<subrange_type_rest>.tipo = SubEntero(lowerBound=lower, upperBound=upper)
								else:
									error("Invalid subrange: lower bound must be smaller than upper bound.")
						}
						| 
                        # únicamente se puede llegar a este caso con un signo + o -
                        # así que los identificadores deben ser enteros!
						<IDENTIFIER> <SUBRANGE_SEPARATOR> <constant>
                        {
                            id = getGlobalValue(<IDENTIFIER>.lex)
                            if (id.tipo.instancia(Entero)) and (<constant>.attr.tipo.instancia(Entero)):
                                # la estructura devuelta por newType contendrá el TIPO,
                                # y las referencias a los valores lowerBound y upperBound
                                <subrange_type_rest>.tipo = SubEntero(lowerBound=id, upperBound=<constant>.attr)
                             else:
								 error("Integer subrange expected")
                        }

						
						#consulta aca... sobre el tipo del índice. Sólo puede ser subrango no?
<structured_type> ::= <ARRAY> <OPEN_BRACKET> <simple_type> <CLOSE_BRACKET> <OF> <simple_type1>
                        {	
							if <simple_type>.tipo.instancia(Simple):
								<structured_type>.tipo = Arreglo(indexRange=<simple_type>.tipo, elementType = <simple_type1>.tipo)
							else:
								error("The index type must be a simple type")
                        }

<variable_definition_part> ::= <VAR> 
								{
									# globalVarIndex: es el índice actual de la variable, usada en la declaración
									globalVarIndex = 0
								}
								<variable_declaration> <variable_declaration_part_rest>
								{

<variable_declaration_part_rest> ::= <SEMI_COLON> <variable_declaration_rest_rest>

<variable_declaration_rest_rest> ::= <variable_declaration> <variable_declaration_part_rest> | <LAMBDA>

<variable_declaration> ::= <IDENTIFIER> 
                            {
								<variable_declaration_rest>.idList = [] 
							}
                            # en este caso, idList es un atributo heredado Y sintetizado
                            # el valor heredado es "lista vacía", y al volver, contendrá todos los ID después de la , en caso de que haya.
                            <variable_declaration_rest>
                            {
                                # <variable_declaration>.idList = <variable_declaration_rest>.idList.append(<IDENTIFIER>.lex) #porque esta esto aca? no va creo
                                for var in <variable_declaration>.idList:
                                    # el valor por defecto de las variables en la tabla de símbolos podría ser None
                                    addNewID(var.lex, newAttr(clase="variable", type=<variable_declaration_rest>.tipo, value=None))
									globalVarIndex += <variable_declaration_rest>.tipo.tamanio
								
                            }

<variable_declaration_rest> ::= <COMMA> <IDENTIFIER> <variable_declaration_rest1>
                                {
                                    <variable_declaration_rest>.idList = <variable_declaration_rest1>.idList.append(<IDENTIFIER>.lex)
                                }
                                |
                                <TYPE_DECLARATION> <type>
                                {
                                    <variable_declaration_rest>.tipo = <type>.tipo
                                }

<procedure_and_function_declaration_part> ::= <procedure_or_function_declaration_part> <SEMI_COLON> <procedure_and_function_declaration_part> | <LAMBDA>

<procedure_or_function_declaration_part> ::= <procedure_declaration> | <function_declaration>

<procedure_declaration> ::= <procedure_heading> <block>

<procedure_heading> ::= <PROCEDURE> <IDENTIFIER> 
                        {
                            # parameterList es un atributo heredado y sintetizado
                            <procedure_heading_rest>.parameterList = []
                        }
                        <procedure_heading_rest>
                        {
                            # <procedure_heading_rest>.parameterList es una lista de listas de parámetros con un tipo asociado, e indicando si es por refer; ejemplo:
                            # [ ([p1, p2, p3], int, referencia), ([p4, p5], char, valor) ]
							# CAMBIADOOO
							# para facilidad en la parte de las expresiones, puse que la lista va a tener una serie de tuplas con parametro, tipo y booleano que indica si es por referencia
							# [(p1,int,referencia),(p2,int, referencia)...]
                            addNewID(<IDENTIFIER>.lex, newAttr(clase = "procedure", Procedimiento( parameterList = <procedure_heading_rest>.parameterList)))
                            # nótese que éste ID se agrega en la tabla de nivel "superior", porque se apila una nueva tabla al comenzar
                            # a parsear <block>
                        }

<procedure_heading_rest> ::= <SEMI_COLON> 
                            |
                            <OPEN_PARENTHESIS> <formal_parameter_section> <formal_parameter_rest>
                            {
                                <procedure_heading_rest>.parameterList = <formal_parameter_section>.parameterList + <formal_parameter_rest>.parameterList
                            }

<formal_parameter_rest> ::= <SEMI_COLON> <formal_parameter_section> <formal_parameter_rest1> 
                            {
                                # el resultado va a ser una lista de listas de parámetros, cada una con un tipo asociado
                                <procedure_heading_rest>.parameterList = <formal_parameter_section>.parameterList + <formal_parameter_rest1>.parameterList
                            }
                            |
                            <CLOSE_PARENTHESIS> <SEMI_COLON>

<formal_parameter_section> ::= <parameter_group> 
                                { 
									<formal_parameter_section>.parameterList=[]
									for x in <parameter_group>.parameterList:
										<formal_parameter_section>.parameterList += (x,<parameter_group>.tipo,False)
                                }
                                |
                                <VAR> <parameter_group>
                                { 
									<formal_parameter_section>.parameterList=[]
									for x in <parameter_group>.parameterList:
										<formal_parameter_section>.parameterList += (x,<parameter_group>.tipo,True)
                                }

<parameter_group> ::=   <IDENTIFIER> 
                        { <parameter_group_rest>.parameterList = [] }
                        <parameter_group_rest>
                        { 
                            <parameter_group>.parameterList = [<IDENTIFIER>.lex] + <parameter_group_rest>.parameterList
                            <parameter_group>.tipo = <parameter_group_rest>.tipo
                        }

<parameter_group_rest> ::= <COMMA> <IDENTIFIER> <parameter_group_rest1> 
                            {
                                <parameter_group_rest>.parameterList = [<IDENTIFIER>.lex] + <parameter_group_rest1>.parameterList
                                <parameter_group_rest>.tipo = <parameter_group_rest1>.tipo
                            }
                            |
                            <TYPE_DECLARATION> <IDENTIFIER>
                            {
                                id = getGlobalValue(<IDENTIFIER>.lex)
                                if id.clase = "type":
                                    <parameter_group_rest>.tipo = id.tipo
                                else:
                                    error("Type expected, but " + <IDENTIFIER>.lex + " found.")
                            }

<function_declaration> ::=  <function_heading> 
							{
								<block>.functionID = <function_heading>.functionID #heredo el id de la funcion en bloque para después usarla en el retorno de la funcion
							}
							<block>

<function_heading> ::= <FUNCTION> <IDENTIFIER>
						{
                            # parameterList es un atributo heredado y sintetizado
                            <procedure_heading_rest>.parameterList = []
                        }
						<function_heading_rest>
						{
                            # <function_heading_rest>.parameterList es una lista de listas de parámetros con un tipo asociado, e indicando si es por refer; ejemplo:
                            # [ ([p1, p2, p3], int, referencia), ([p4, p5], char, valor) ]
							#<function_heading_rest>.returnType es el tipo que retorna la funcion. Debe ser simple
							if <function_heading_rest>.returnType.instancia(Simple):
								addNewID(<IDENTIFIER>.lex, newAttr(clase = "function", Funcion( parameterList = <procedure_heading_rest>.parameterList,<function_heading_rest>.returnType)))
								<function_heading>.functionID = <IDENTIFIER>.lex
								
							else:	
								error("Functions must return a simple type")
                            # nótese que éste ID se agrega en la tabla de nivel "superior", porque se apila una nueva tabla al comenzar
                            # a parsear <block>
                        }

<function_heading_rest> ::= <TYPE_DECLARATION> <IDENTIFIER> <SEMI_COLON> 
							{
								id = getGlobalValue(<IDENTIFIER>.lex)
								if id.clase=="type":
									<function_heading_rest>.returnType = id.tipo
								else:
									error("Type expected but " + <IDENTIFIER>.lex + " found")
							}
							|
							<OPEN_PARENTHESIS> <formal_parameter_section> <formal_parameter_function_rest>
							{
								<function_heading_rest>.parameterList = [(<formal_parameter_section>.parameterList, <formal_parameter_section>.tipo, <formal_parameter_section>.byReference)] + <formal_parameter_function_rest>.parameterList
								<function_heading_rest>.returnType =  <formal_parameter_function_rest>.returnType
							}
							

<formal_parameter_function_rest> ::= <SEMI_COLON> <formal_parameter_section> <formal_parameter_function_rest> 
									{
										<formal_parameter_function_rest>.parameterList = [(<formal_parameter_section>.parameterList, <formal_parameter_section>.tipo, <formal_parameter_section>.byReference)] + <formal_parameter_function_rest>.parameterList
									}
									| <CLOSE_PARENTHESIS> <TYPE_DECLARATION> <IDENTIFIER> <SEMI_COLON>
									{
										id = getGlobalValue(<IDENTIFIER>.lex)
										if id.clase=="type":
											<formal_parameter_function_rest>.returnType = id.tipo
										else:
											error("Type expected but " + <IDENTIFIER>.lex + " found")
									}

<statement_part> ::= <compound_statement>

<compound_statement> ::= <BEGIN> <statement> <statement_part_rest> <END>

<statement_part_rest> ::= <SEMI_COLON> <statement> <statement_part_rest> | <LAMBDA>

<statement> ::= <simple_statement> | <structured_statement>

<simple_statement> ::= <IDENTIFIER> 
                        {
                            <simple_statement_rest>.ID = <IDENTIFIER>.lex
							<simple_statement_rest>.nivel = getLexicalLevel()
                        }
                        <simple_statement_rest> 
						| 
						<LAMBDA>

<simple_statement_rest> ::= <ASSIGNMENT> <expression> 
                            {
                                identifier = getGlobalValue(<simple_statement_rest>.ID)
                                if identifier.clase == "variable":
                                    if checkTypes(identifier.tipo, <expression>.tipo):
                                        # se asigna el valor de la expresión a la variable
                                    else:
                                        error("Incompatible types: "+identifier.tipo.nombre+" expected, but "+<expression>.tipo.nombre+" found.")
                                elif identifier.clase == "funcion" and <simple_statement_rest>.ID==<simple_statement_rest>.functionID: 	
									#este es el caso que se le asigne un return a la funcion... habria que propagar siempre el functionID
									# se asigna el valor de la expresion al retorno de funcion
									
								else:
                                    error("Left side of assignment must be a variable!")
                            }
                            |
                            <OPEN_BRACKET> <expression> <CLOSE_BRACKET> <ASSIGNMENT> <expression1>
                            {
                                if checkTypes(id.tipo.indexType, <expression>.tipo):
									if checkTypes(id.tipo.rangeType, <expression1>.tipo):
										# estamos asignando una expresión que estará en la pila a un elemento de un arreglo
									else:
										error("Non compatible types in assignment. %s expected, but %s found" % (id.tipo.indexType, <expression>.tipo))
                                else:                                    
                                    error("Non compatible types in assignment. %s expected as index, but %s found" % (id.tipo.indexType, <expression>.tipo))
                            }
                            |
                            <OPEN_PARENTHESIS> 
							{
								identifier = getGlobalValue(<simple_statement_rest>.ID)
								if identifier.clase== "procedure":
									#armar el nuevo entorno, con su registro de activacion, guardar las variables, y apuntar la ejecucion al codigo del procedimiento
									<actual_parameter>.attr = identifier.tipo.params[0]
									<actual_parameter_rest>.params = identifier.tipo.params[1:-1]
								else:
									error(<simple_statement_rest>.ID+ " is not a procedure")
									
							}
							<actual_parameter> <actual_parameter_rest> 

							| 
							<LAMBDA>
							{
								identifier = getGlobalValue(<simple_statement_rest>.ID)
								if identifier.clase== "procedure":
									#armar el nuevo entorno, con su registro de activacion, guardar las variables, y apuntar la ejecucion al codigo del procedimiento
								else:
									error(<simple_statement_rest>.ID+ " is not a procedure")
							}

<expression> ::= <simple_expression> 
				{
					<expression_rest>.attr = <simple_expression>.attr
					#expression_rest debe heredar el valor de simple_expression
					
				}
				<expression_rest>
				{
					<expression>.attr = <expression_rest>.attr
				}
				

<expression_rest> ::= <relational_operator> <simple_expression> 
					  {
						if checkTypes(<expression_rest>.attr.tipo,<simple_expression>.attr.tipo) and <simple_expression>.attr.tipo.instancia(Simple):
							#se debe apilar el valor de simple_expression, y luego aplicar el operador relacional de relational_operator
							<expression_rest>.attr = Attr(clase="subexpression", tipo = Booleano())
						else:
							error("invalid types")
					  }
					  | 
					  <LAMBDA>

<simple_expression> ::= <term> 
						{
							<simple_expression_other>.attr=<term>.attr
						}
						<simple_expression_other> 
						{
							<simple_expression>.attr = <simple_expression_other>.attr
						}

<simple_expression_other> ::= <adding_operator> <term> 
							  {
								if checkTypes(<simple_expression_other>.attr.tipo,<term>.attr.tipo) and <term>.attr.tipo.instancia(<adding_operator>.tipo):
									# apilar term, y aplicar adding_operator
									<simple_expression_other1>.attr = newAttr(tipo=<adding_operator>.tipo,clase="subexpresion")
								else:
									error("invalid types") #estos mensajes pueden mejorar
							  }
							  <simple_expression_other1> 
							  {	
								<simple_expression_other>.attr = <simple_expression_other1>.attr
							  }
							  | 
							  <LAMBDA>

<term> ::= <factor>
		   {
			<term_other>.attr = <factor>.attr
		   }
		   <term_other>
		   {
			<term>.attr = <term_other>.attr
		   }

<term_other> ::= <multiplying_operator> <factor> 
				 {
					if checkTypes(<term_other>.attr.tipo,<factor>.attr.tipo) and <factor>.attr.tipo.instancia(multiplying_operator.tipo):
						#apilar factor, aplicar el operador
						<term_other1>.attr = <factor>.attr
					else:
						error("invalid types")
				 }
				 <term_other1> 
				 {
					<term_other>.attr = <term_other1>.attr
				 }
				 | 
				 <LAMBDA>

<factor> ::= <IDENTIFIER> 
			 {
				<factor_rest>.id=<IDENTIFIER>.lex
			 }
			 <factor_rest> 
			 {
				<factor>.attr=<factor_rest>.attr
			 }
			 | 
			 <NUMBER> 
			 {
				<factor>.attr = newAttr(valor=<NUMBER>.lex,tipo=Entero(),clase="literal")
			 }
			 | 
			 <OPEN_PARENTHESIS> <expression> <CLOSE_PARENTHESIS> 
			 {
				<factor>.attr = <expression>.attr
			 }
			 | 
			 <NOT_LOGOP> <factor1> 
			 {
				if <factor1>.attr.tipo.instancia(Booleano):
					<factor>.attr = newAttr(tipo=Booleano(),clase="subexpresion")
				else:
					error("Boolean expected but "+<factor1>.tipo+" found")
			 }
			 | 
			 <CHAR>
			 {
				<factor>.attr = newAttr(valor=<CHAR>.lex,tipo=Caracter(),clase="literal")
			 }
			 |
			 <sign> <factor1>
			 {
				if <factor1>.attr.tipo.instancia(Entero):
					<factor>.attr = newAttr(tipo=Entero(),clase="subexpresion")
					# multiplicar el valor que viene de sign
				else:
					error("Integer expected but  "+<factor1>.tipo+" found")
			 }
			 # modifique esto de la gramatica y simple_expression porque sino habia que heredar el signo y era un quilombo

<factor_rest> ::= <OPEN_BRACKET> <expression> <CLOSE_BRACKET> 
				  {
					array = getGlobalValue(<factor_rest>.id)
					if array.clase=="variable" and array.tipo.instancia(Arreglo):
						if checkTypes(<expression>.attr.tipo,array.tipo.index):
							#chequear que el resultado de la expresion este dentro del rango, sino tirar index out of bounds
							#devolver el contenido del arreglo
							<factor_rest>.attr = newAttr(valor="""valor de la posicion del arreglo""",tipo=array.tipo.element,clase="subexpresion")
						else:
							error(array.tipo + " expected as index but " + <expression>.attr.tipo + " found")
					else:
						error(<factor_rest>.id + " is not a valid array")
						
				  }
				  | 
				  <OPEN_PARENTHESIS> 
				  {
					fun = getGlobalValue(<factor_rest>.id)
					if fun.clase=="function":
						parameterList = fun.tipo.parameterList
						<actual_parameter>.expected = parameterList[0][1:2] #esto seria el tipo esperado por el parametro
					else:
						error(<factor_rest>.id + " is not a function")
				  } 
				  <actual_parameter>
				  {
					<actual_parameter_rest>.parameterList=parameterList[1:] #le paso los siguientes parametros
					#colocar el parametro en su debido lugar en la pila
				  }
				  <actual_parameter_rest> 
				  {
					# llamar a la funcion con los parametros que estaran debidamente apilados
					<factor_rest>.attr=newAttr(valor="""valor donde se colocara el resultado de la funcion"""tipo=id.tipo.ret,clase="subexpresion")
				  }
				  | 
				  <LAMBDA>
				  {
					id = getGlobalValue(<factor_rest>.id)
					if id.clase=="function":
						#llamar a la funcion sin parametros
						<factor_rest>.attr = newAttr(tipo=id.tipo.ret,clase="subexpresion")
					elif id.tipo.instancia(Tipo): #es una variable o una constante.
						# se coloca el valor del id en la pila
						<factor_rest>.attr = id
					else:
						error("Function, variable or constant expected, but "+id.tipo+" found")
					
				  }

<actual_parameter> ::= {
						<expression>.porReferencia=<actual_parameter>.expected[1]#aca viene el booleano
						#capaz que no sea necesario, si se viene levantando el attr con la clase variable...
					   }
					   <expression>
					   {
						if <actual_parameter>.expected[1]:
							if <expression>.attr.clase=="variable":
								<actual_parameter>.attr=<expression>.attr
							else:
								error("Variable expected")
						else:
							<actual_parameter>.attr=<expression>.attr
					   }

<actual_parameter_rest> ::= <COMMA> 
							{
								if len(<actual_parameter_rest>.parameterList)>0:
									<actual_parameter>.expected = <actual_parameter_rest>.parameterList[0][1:2]
								else:
									error("More parameters than expected")
							}
							<actual_parameter>
							{
								#colocar el parametro en la pila
								<actual_parameter_rest>.parameterList=parameterList[1:]
							}
							<actual_parameter_rest> 
							| 
							<CLOSE_PARENTHESIS>
							{
								if len(<actual_parameter_rest>.parameterList)>0:
									error("Less parameters than expected")
							}

<multiplying_operator> ::= <MULTIPLY_OP> 
							{
								<multiplying_operator>.op = "MULT"
								<multiplying_operator>.tipo = Entero()
							
							}
							| 
							<DIV_OP> 
							{
								<multiplying_operator>.op = "DIVI"
								<multiplying_operator>.tipo = Entero()
							}
							| 
							<AND_LOGOP>
							{
								<multiplying_operator>.op = "DISJ"
								<multiplying_operator>.tipo = Booleano()
							}

<adding_operator> ::= <ADD_OP> 
						{
							<multiplying_operator>.op = "SUMA"
							<multiplying_operator>.tipo = Entero()
						
						}
						|
						<MINUS_OP> 
						{
							<multiplying_operator>.op = "SUST"
							<multiplying_operator>.tipo = Entero()
						
						}
						|
						<OR_LOGOP>
						{
							<multiplying_operator>.op = "CONJ"
							<multiplying_operator>.tipo = Booleano()
						
						}

<relational_operator> ::= <LESS_OP> 
							{
								<multiplying_operator>.op = "CMME"
								<multiplying_operator>.tipo = Simple()
							
							}
							| 
							<LESS_EQUAL_OP> 	
							{
								<multiplying_operator>.op = "CMNI"
								<multiplying_operator>.tipo = Simple()
							
							}
							| 
							<GREATER_OP> 
							{
								<multiplying_operator>.op = "CMMA"
								<multiplying_operator>.tipo = Simple()
							
							}
							| 
							<GREATER_EQUAL_OP> 
							{
								<multiplying_operator>.op = "CMYI"
								<multiplying_operator>.tipo = Simple()
							
							}
							| 
							<NOT_EQUAL_OP> 
							{
								<multiplying_operator>.op = "CMDG"
								<multiplying_operator>.tipo = Tipo() #no estoy seguro si se pueden comparar tipos estructurados tmb ...
							}
							| 
							<EQUAL>
							{
								<multiplying_operator>.op = "CMIG"
								<multiplying_operator>.tipo = Tipo()#no estoy seguro si se pueden comparar tipos estructurados tmb ...
							
							}

<structured_statement> ::= <compound_statement> | <conditional_statement> | <repetitive_statement>

<conditional_statement> ::= <IF> <expression> 
							{
								if <expression>.tipo.instancia(Booleano):
									#apilar su valor en la lista..
									#aplicar desvio si falso a la etiqueta de despues del if
								else:
									error("Boolean expected")
							}
							<THEN> <statement> <conditional_statement_other>

<conditional_statement_other> ::= <ELSE>
								  {
									#desvio si verdadero a la etiqueta de despues del if
								  } 
								  <statement> 
								  | 
								  <LAMBDA>

<repetitive_statement> ::= <WHILE> 
							{
								#poner un label de inicio de expresion
							}
							<expression> 
							{
								if <expression>.tipo.instancia(Booleano):
									#apilar su valor en la lista..
									#aplicar desvio si falso a la etiqueta de despues del while
								else:
									error("Boolean expected")
							}
							<DO> <statement> #saque el repetitive_statement_rest porque statement ya tiene un lambda... o sea, teniamos una gramatica ambigua
							{
								#en el apunte de mepa dice que va desvio si verdadero. Para mi es desvio siempre... al label de inicio del while
							}